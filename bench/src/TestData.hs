{-# LANGUAGE ParallelListComp, NoMonomorphismRestriction #-}
module TestData where

import Control.DeepSeq
import Control.Applicative
import Control.Monad
import Data.List
import Data.Function
import qualified Data.Set as S
import Math.Polynomial
import Math.Polynomial.Type
import qualified Data.Vector as V

-- Test data will be built up from "interesting" bits tagged with various strings,
-- identifying relevant characteristics of the test data.
--
-- There are many (completely arbitrary) constants embedded in the code.
-- This is intentional - they were chosen once and will be used consistently.

data Tagged a = Tagged { tags :: S.Set String, untag :: a }
    deriving (Eq, Ord, Show)
instance Functor Tagged where
    fmap f x = x { untag = f (untag x) }
instance Applicative Tagged where
    pure x       = Tagged { tags = S.empty,                   untag = x }
    liftA2 f x y = Tagged { tags = S.union (tags x) (tags y), untag = z }
        where z = f (untag x) (untag y)
instance Monad Tagged where
    x >>= f  = Tagged { tags = S.union (tags x) (tags y), untag = untag y }
        where y = f (untag x)

instance NFData a => NFData (Tagged a) where
    rnf (Tagged t x) = rnf t `seq` rnf x

showTags = show . tags

tag_ :: String -> Tagged ()
tag_ str = Tagged (S.singleton str) ()
tag :: [String] -> a -> Tagged a
tag strs x = mapM_ tag_ strs >> return x
retag :: (String -> String) -> Tagged a -> Tagged a
retag f x = x { tags = S.map f (tags x) }

-- 'sequence', but modifying each elements' tags to include their position in
-- the list.
argList :: [Tagged a] -> Tagged [a]
argList xs = sequence
    [ retag ((show n ++ ": ") ++ ) x
    | n <- [1..]
    | x <- xs
    ]

argPair x y = liftM2 (,) (retag ("1: " ++) x) (retag ("2: " ++) y)

listCon     = tag ["ListPoly"]   (rawListPoly)
vectorCon   = tag ["VectorPoly"] (\e -> rawVectorPoly e . V.fromList)
allCons     = [listCon, vectorCon]

emptyList   = tag ["empty"]     []
singleton   = tag ["singleton"] [4]
short       = tag ["short"]     [508,6,9,12,68]
medium      = tag ["medium"]    [14,14,7,10,10,20,54,34,23,0,2,26,11,28,72]
long        = tag ["long"]      [64,5,16,57,7,26,4,4,6,77,3,98,60,75,9,96,51,29,16,22,15,22,334,14,44,335,155,15,16,1446]
allLists    = [emptyList, singleton, short, medium, long]

sparseMask  = tag ["sparse"]    (cycle [1,0,1,1,0,0,1,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0])
sparse list = liftM2 (zipWith (*)) list sparseMask

mixedSignMask   = tag ["mixed sign"] (cycle [-1,1,-1,1,-1,-1,-1,1,1,1,1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,1,-1,1,-1,-1,-1,1,-1,-1,1])
mixedSign list  = liftM2 (zipWith (*)) list mixedSignMask

endianness  = [tag ["LE"] LE, tag ["BE"] BE]

arbitraryMask p = cycle (map (<= p) [0.6545122052420516,0.7935061517286255,0.9430689050239152,8.915837644517022e-2,0.8240712197654851,0.1451909433461187,0.4094770070259899,4.296123848340483e-2,0.4260732810734844,0.41693457136305945,0.4047030614427565,0.4754311706491221,0.1301597244562478,0.16967535126341038,0.3904802437314454,0.5042209986298589,0.3948927252180787,0.8523473758562077,4.646076724516446e-3,0.5440461675737274,9.450922895675973e-2,0.3791973516071827,0.49101162141815036,0.3806442932000289,1.6519139503315294e-2,0.42767048499521376,0.464094423382184,0.5844248407443693,0.134851649924685,0.8629447291214571,0.48913060443391987,0.9120157292400168,0.6864325773888216,0.7846633501899081,0.9383895792150898,0.47690220329781297,4.438618749018075e-2,0.2666020387573511,0.640500546499386,0.7426198456005015,0.536731395564134,0.7878706232742358,0.24996977072228743,0.37723895259312923,9.314199512250121e-2,5.7845583822269786e-2,0.9852002692038386,0.27178518647870553,0.7399580402863786,0.8933056638843451,0.661017609488505,2.9147315566913745e-2,0.4733528535199325,0.7640683716506251,0.6481732411530226,0.3615158976010169,0.6819568373974192,7.116370019370089e-2,0.49107442893685116,0.7676218852999912,0.9901593003609499,0.8947881401796094,0.8327004638680966,0.8077670503462937,0.8433996548881966,0.10070342354060657,0.6337065825777966,0.46806680498621134,0.6856343338058202,0.24463642877301606,0.8037665856615703,0.31134149227422725,0.2685804978833013,0.6949450721152373,0.6858493016117155,0.7144551693432915,0.5855222556786401,2.1008245931653402e-2,0.8246584510580073,0.26593837472000725,0.976134261170426,0.5884075074210506,0.9023081347420792,0.29852733336893666,0.44598198507753195,0.23726719903405358,0.5375971011813556,0.9974908658904555,0.6745975665870618,4.96122621686057e-2,0.43096373779196284,0.2351202865145261,0.2482039583457909,0.7352107465041675,0.30173847621503125,0.4532014192737823,4.8721144337025235e-2,0.6894868320920802,0.5719242627284906,0.5142488859583141,0.45704771535518596,0.2369853902889667,0.9765043672795606,0.11070313168981016,0.23397805842034702,0.9113288661846248,0.29977055906300243,4.946455769428115e-2,0.835640467074062,0.6993043735454452,0.5641141229461692,0.48941952745184314,0.6335198512992699,0.16143493937675846,0.4870582192276969,0.1457244114032905,0.24914737212526994,0.4101045528232721,0.18907389878780467,0.7763793543364881,0.5955249510500402,6.038141832802602e-4,0.30124591955640656,5.4727906683336824e-2,0.23321363651008586,0.7061622510719419,1.5803648284904437e-3,0.22466622792964097,0.9979724827956906,0.31072356038300875,5.612879696340589e-2,0.3473913623646756,0.33307098535888735,0.36143568809142046,0.632702001948309,0.19502264425863713,0.19009812614668564,0.21552459873149088,0.3906742589316612,0.6551768924895798,0.7443736872892828,0.4117235711489444,0.6863316226545046,9.155666325967449e-2,0.8403062212111647,0.8902373887541293,0.7222000503622503,0.3936678654615591,2.2387565819306676e-2,0.5817530273797851,0.5836231043132174,0.7261379312101361,6.356545870562624e-2,0.6556241066423794,0.22599990457119357,0.8386425752640179,0.7755107393585297,0.467441699295599,0.7201969480155594,0.5013991042945283,0.511129447914616,0.8092726549755926,0.9811994576166079,0.5489295318603375,0.7828553281106756,0.4541407127334849,0.7391475186843899,0.9272822803972534,0.811104012419922,0.3515707806320967,0.4774632912746042,0.5882444109820528,4.052760006071909e-2,0.14875147864725258,0.34013545017856384,0.8993929706633392,0.5408858019125726,0.375228470540762,0.733290198307051,0.472154315869624,0.5059885388043994,0.3810409242683046,0.9123675742826685,0.9581400890871026,0.8396937673855054,0.38511520232350094,0.4125011217678658,0.5957057149814462,0.564232932729952,8.298565419078208e-2,0.8726844666878872,0.7653521709090301,0.5221076678050904,0.9708523411847747,8.810794933738975e-2,0.9273361133717797,0.8685733110530052,0.6646814194103734,0.8381508362083452,2.2960851899554324e-2])

-- take "about p" (considered as a fraction) of the elements of a list
arbitrarySubset p = map snd . filter fst . zip (arbitraryMask p)

-- take "about n" arbitrary elements of a list
arbitrarySubset' n xs = arbitrarySubset (n / genericLength xs) xs

allPolys = 
    [ construct `ap` end `ap` coeffs
    | (end, coeffs) <- nubBy ((==) `on` (\(e,c) -> poly (untag e) (untag c)))
        [ (end, coeffs)
        | end       <- endianness
        , list      <- allLists
        , mbSparse  <- [id, sparse]
        , mbSign    <- [id, mixedSign]
        , let coeffs = mbSparse (mbSign list)
        ]
    , construct <- allCons
    ]
